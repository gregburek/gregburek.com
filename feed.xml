<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Greg Burek</title>
  <subtitle>Greg writes things</subtitle>
  <id>http://blog.gregburek.com/</id>
  <link href="http://blog.gregburek.com/"/>
  <link href="http://blog.gregburek.com/feed.xml" rel="self"/>
  <updated>2015-02-22T15:33:00-08:00</updated>
  <author>
    <name>Greg Burek</name>
  </author>
  <entry>
    <title>DNS, eglibc and resolv-replace on Heroku</title>
    <link rel="alternate" href="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/"/>
    <id>/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/</id>
    <published>2015-02-22T15:33:00-08:00</published>
    <updated>2015-02-22T15:33:00-08:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;2015-03-01: Fixed versions of eglibc are available for Ubuntu Precise and
Trusty. Time to update.&lt;/p&gt;

&lt;p&gt;I work on the team that runs &lt;a href="https://www.heroku.com/postgres"&gt;Heroku Postgres&lt;/a&gt;. As we have continued to grow, I
have been tracking an intermitent error with &lt;a href="https://devcenter.heroku.com/articles/rollbar"&gt;Rollbar&lt;/a&gt; that occurs about once
every 50,000 HTTP requests. As we are doing many hundreds of thousands of API
calls a minute to various services, this error can pop up fairly frequently and
in very inconvenient places. The most common traceback seems to indicate a
failure to resolve DNS:&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#&amp;lt;SocketError: getaddrinfo: Name or service not known&amp;gt;&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'initialize'&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'open'&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'block in connect'&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href="http://lmgtfy.com/?q=SocketError%3A+getaddrinfo%3A+Name+or+service+not+known+heroku"&gt;Google&lt;/a&gt; led me to a &lt;a href="http://www.subelsky.com/2014/05/fixing-socketerror-getaddrinfo-name-or.html"&gt;pertinent blog post&lt;/a&gt; that recommended using ruby&amp;rsquo;s
&lt;a href="http://apidock.com/ruby/Resolv"&gt;Resolv&lt;/a&gt; library for all DNS requests via a script called &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/resolv-replace.rb"&gt;resolv-replace&lt;/a&gt;.
Adding a single line to our initializers, &lt;code&gt;require resolv-replace&lt;/code&gt;, caused errors
while submitting Logplex messages to immediately drop:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Logplex Errors" src="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/logplex_errors.png" /&gt;&lt;/p&gt;

&lt;p&gt;As did errors from trying to interact with our monitoring service, Observatory:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Observatory Errors" src="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/observatory_errors.png" /&gt;&lt;/p&gt;

&lt;p&gt;In an internal thread, &lt;a href="https://twitter.com/freeformz"&gt;Ed Muller&lt;/a&gt; pointed out a &lt;a href="https://github.com/golang/go/issues/6336#issuecomment-66085142"&gt;golang work around&lt;/a&gt;
of a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=15946"&gt;bug in glibc&lt;/a&gt; which is very likely to be a factor in this error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Under high load, getaddrinfo() starts sending DNS queries to random
file descriptors, e.g. some unrelated socket connected to a remote service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Heroku is a shared platform with multitenant runtime instances, it is
possible for a random runtime to experience high load and the &lt;a href="https://devcenter.heroku.com/articles/cedar-ubuntu-packages"&gt;cedar-14 glibc
binaries&lt;/a&gt; are known to be impacted by this bug. Version 2.20 of glibc has a
fix and as of &lt;a href="https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/eglibc/trusty-security/revision/346"&gt;2.19-0ubuntu6.6&lt;/a&gt; and &lt;a href="https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/precise/eglibc/precise-security/revision/316"&gt;2.15-0ubuntu10.11&lt;/a&gt; this fix was
backported to Ubuntu Precise and Trusty. &lt;s&gt;However, Ubuntu Precise currently
ships &lt;a href="http://packages.ubuntu.com/precise-updates/libc6"&gt;2.15-0ubuntu10.10&lt;/a&gt; and Trusty provides &lt;a href="http://packages.ubuntu.com/trusty-updates/libc6"&gt;2.19-0ubuntu6.5&lt;/a&gt;, so this
bug may continue to be a problem for some time to come.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;My immediate recommendation is to use language native DNS resolution like
&lt;code&gt;resolv-replace&lt;/code&gt; whenever possible, on Heroku or other systems. However, if you
require ipv6 or run into problems with &lt;a href="https://github.com/mperham/sidekiq/issues/1258#issuecomment-27389456"&gt;third party gems attempting to resolve
&lt;code&gt;nil&lt;/code&gt; addresses&lt;/a&gt;, and are stuck with the system DNS, upgrade yourself!
&lt;s&gt;please indicate that this bug affects you on the &lt;a href="https://bugs.launchpad.net/eglibc/+bug/1421393"&gt;Launchpad bug report
requesting backporting&lt;/a&gt; to supported versions of Ubuntu.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Ed Muller, Michael Hale, Keiko Oda, Steve Conklin, Terence Lee and
Richard Schneeman for help in figuring this out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Require HTTPS to your Heroku app</title>
    <link rel="alternate" href="/2014/10/26/require-ssl-to-your-heroku-app/"/>
    <id>/2014/10/26/require-ssl-to-your-heroku-app/</id>
    <published>2014-10-26T15:29:00-07:00</published>
    <updated>2014-10-26T15:29:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;Configuring your Heroku app so that it will redirect insecure HTTP traffic to an
HTTPS endpoint can be finicky and is language/framework specific. I was able to
figure out a general and language independent method thanks to the &lt;a href="https://github.com/ryandotsmith/nginx-buildpack"&gt;nginx
buildpack&lt;/a&gt;. By using nginx,
you can redirect some or all http traffic to your app to the https verison of
your site.&lt;/p&gt;

&lt;p&gt;By adding:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if ($http_x_forwarded_proto != 'https') {
  rewrite ^ https://$host$request_uri? permanent;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to the &lt;code&gt;location&lt;/code&gt; section of your app&amp;rsquo;s nginx config file template, any access
to that location will be met with a &lt;code&gt;301 Moved Permanently&lt;/code&gt; redirect to the
&lt;code&gt;https&lt;/code&gt; version of that site and path.&lt;/p&gt;

&lt;p&gt;EDIT: @jacobian &lt;a href="https://twitter.com/jacobian/status/526538110201368576"&gt;pointed
out&lt;/a&gt; on twitter that
using &lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HTTP Strict Transport Security
(HSTS)&lt;/a&gt; headers
will make modern clients prefer HTTPS, even for the &lt;code&gt;/insecure&lt;/code&gt; path that lacks
the redirect snippet.&lt;/p&gt;

&lt;p&gt;As all apps are accessible at &lt;code&gt;https://&amp;lt;app-name&amp;gt;.herokuapp.com/&lt;/code&gt; by using
Heroku&amp;rsquo;s &lt;code&gt;herokuapp.com&lt;/code&gt; SSL cert, this provides a free and easy way to secure
your apps. Custom domain names require custom SSL certs, which are available
from traditional SSL vendors or from Heroku addon &lt;a href="https://www.expeditedssl.com/"&gt;Expedited
SSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sample app can be found at
&lt;a href="https://github.com/gregburek/heroku-force-ssl-sample"&gt;https://github.com/gregburek/heroku-force-ssl-sample&lt;/a&gt;
and deployed to your Heroku account here: 
&lt;a href="https://heroku.com/deploy?template=https://github.com/gregburek/heroku-force-ssl-sample"&gt;&lt;img alt="Deploy" src="https://www.herokucdn.com/deploy/button.png" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Moving site to Middleman</title>
    <link rel="alternate" href="/2014/07/06/moving-site-to-middleman/"/>
    <id>/2014/07/06/moving-site-to-middleman/</id>
    <published>2014-07-06T18:57:00-07:00</published>
    <updated>2014-07-06T18:57:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;This is me attempting to resurrect my blog after several years of silence. This
has also given me a chance to redesign things and adopt another static sight
generator.&lt;/p&gt;

&lt;p&gt;Octopress served me well, but I felt like it was difficult to grasp the
fundamentals and hard to pick up after a while away. I went looking for new site
framework and found &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. I liked that it was
written in Ruby and I really liked the tutorials I found for it.&lt;/p&gt;

&lt;p&gt;In particular, Julie Pagano&amp;rsquo;s fantastic
&lt;a href="http://juliepagano.com/blog/2013/11/10/site-redesign-using-middleman/"&gt;tutorial&lt;/a&gt;
was invaluable in getting me past a bunch of unexpected things.&lt;/p&gt;

&lt;p&gt;The plugins I am using are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/middleman/middleman-blog"&gt;middleman-blog&lt;/a&gt; for support of
the article format&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neo/middleman-gh-pages"&gt;middleman-gh-pages&lt;/a&gt; for an easy
GitHub pages integrated workflow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/middleman/middleman-blog"&gt;middleman-syntax&lt;/a&gt; for syntax
highlighting of code snippets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting from a blank Gemfile, unfortunately, seemed to not give properly
rendered code syntax blocks.&lt;/p&gt;

&lt;p&gt;An unmerged &lt;a href="https://github.com/middleman/middleman-syntax/pull/42"&gt;PR&lt;/a&gt; appears
to address the problem, but I found that using Julie Pagano&amp;rsquo;s
&lt;a href="https://github.com/juliepagano/juliepagano.com/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt;
also worked very well. I am very grateful that it was available.&lt;/p&gt;

&lt;p&gt;The rest of the work was about adapting my strange icon color scheme into
something that doesn&amp;rsquo;t repulse and offend. Mixed results, I would say.&lt;/p&gt;

&lt;p&gt;Now that this is set up, I have high hopes to use this new system to write more
about technology and my experiences with it.&lt;/p&gt;

&lt;p&gt;The code for this site now resides on &lt;a href="https://github.com/gregburek/gregburek.com"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Debugging a chef cookbook in vagrant with shef</title>
    <link rel="alternate" href="/2012/08/21/debugging-a-chef-cookbook-in-vagrant-with-shef/"/>
    <id>/2012/08/21/debugging-a-chef-cookbook-in-vagrant-with-shef/</id>
    <published>2012-08-21T21:00:00-07:00</published>
    <updated>2012-08-21T21:00:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;Sometimes &lt;a title="Vagrant - Virtualized development for
the masses" href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;&amp;rsquo;s provisioning error messages can be a little cryptic. When
troubleshooting a failing chef-solo run, tweaking a &lt;code&gt;run_list&lt;/code&gt; or debugging a
new recipe, I&amp;rsquo;ve found it very handy to log into the partially provisioned VM
with &lt;code&gt;vagrant ssh&lt;/code&gt; and then run: &lt;a title="Vagrant -
Virtualized development for the masses" href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt; is a great tool for developing and
testing new chef cookbooks. After bringing up a new vm, and editing a
cookbook,&lt;code&gt;vagrant provision&lt;/code&gt; runs the chef-solo provisioner and tests things
out. However, when things fail, vagrant&amp;rsquo;s provisioning error messages can be a
little cryptic. &lt;a title="Shef - Chef -
Opscode Open Source Wiki" href="http://wiki.opscode.com/display/chef/Shef"&gt;Shef&lt;/a&gt; is a good tool for running cookbooks in isolation,
but it needs some help to find all the configuration and attributes that
vagrant provides. If my &lt;code&gt;new_and_broken&lt;/code&gt; cookbook is failing on a Ubuntu 12.04
VM, all I need to do is run:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ shef -s -c /tmp/vagrant-chef-1/solo.rb -j /tmp/vagrant-chef-1/dna.json
    (output snip)
chef &amp;gt; recipe
chef:recipe &amp;gt; include_recipe 'new_and_broken'
    (huge output snip)
chef:recipe &amp;gt; run_chef
    (where the error happens)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This loads shef in solo mode, with vagrant generated configuration and JSON
attributes files, enters into recipe mode, loads my new and broken cookbook and
runs it. The resulting error messages are usually more helpful than &lt;code&gt;vagrant
provision&lt;/code&gt; and I can get back to work. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using veewee 0.2 with Vagrant omnibus</title>
    <link rel="alternate" href="/2012/08/12/using-veewee-0-dot-2-with-vagrant-omnibus/"/>
    <id>/2012/08/12/using-veewee-0-dot-2-with-vagrant-omnibus/</id>
    <published>2012-08-12T15:20:00-07:00</published>
    <updated>2012-08-12T15:20:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;I&amp;rsquo;m a huge fan of &lt;a title="Vagrant - Virtualized
development for the masses" href="http://vagrantup.com"&gt;Vagrant&lt;/a&gt;&amp;rsquo;s recent omnibus style installer. It makes it so
much easier to recommend to others as they can be up and running with Vagrant
extremely quickly, instead of wondering why their distro packaged ruby
installation isn&amp;rsquo;t working. However, because Vagrant is using an embedded ruby
installation, other gems which add to vagrant are unable to find it. &lt;/p&gt;

&lt;p&gt;One such tool is &lt;a title="Veewee on
Github" href="http://github.com/jedi4ever/veewee/"&gt;veewee&lt;/a&gt;, which makes it dead simple to automatically build VMs from
kickstarter files and basic scripts. Version 0.2 also adds a great subcommand
to Vagrant called &amp;lsquo;basebox&amp;rsquo; which lets you use veewee to build baseboxes that
Vagrant may then use to launch new VMs. But with Vagrant being run from its own
embedded ruby environment, veewee is not able to find the vagrant gem to add
to, making it a little harder to use for ruby newbies. &lt;/p&gt;

&lt;p&gt;There is a way around this, though. If you were to run:&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sudo /opt/vagrant/embedded/bin/gem install veewee --no-ri --no-rdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;veewee is installed to the vagrant embedded environment and &lt;code&gt;vagrant basebox&lt;/code&gt;
is available and functions as expected. I&amp;rsquo;ve done this on my OSX 10.8 box that
uses rbenv to manage ruby versions as well on a Ubuntu 12.04 box that uses rvm. &lt;/p&gt;

&lt;p&gt;Let me know if this does or doesn&amp;rsquo;t work for you.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Rate Limiting Function Calls in Python with a Decorator</title>
    <link rel="alternate" href="/2011/12/05/Rate-limiting-with-decorators/"/>
    <id>/2011/12/05/Rate-limiting-with-decorators/</id>
    <published>2011-12-05T00:00:00-08:00</published>
    <updated>2011-12-05T00:00:00-08:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;source: &lt;a href="http://stackoverflow.com/a/667706/586172"&gt;Stack Overflow &amp;ldquo;What&amp;rsquo;s a good rate limiting algorithm?&amp;rdquo;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I making this into a post because I have found it so handy. Some web
APIs have rate limits on requests per minute or you may want to play nice
and not overwhelm the service. In Python, you can use this decorator to
rate limit a function that may handle the API access: &lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;RateLimited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxPerSecond&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;minInterval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxPerSecond&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;lastTimeCalled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rateLimitedFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;elapsed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lastTimeCalled&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;leftToWait&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minInterval&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;leftToWait&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftToWait&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lastTimeCalled&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rateLimitedFunction&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;decorate&lt;/span&gt;

&lt;span class="nd"&gt;@RateLimited&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;# 2 per second at most&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;PrintNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;"This should print 1,2,3... at about 2 per second."&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;PrintNumber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This answer is simpler than setting up a queue system and is blocking,
which can be good for sequential jobs. &lt;/p&gt;
</content>
  </entry>
</feed>
