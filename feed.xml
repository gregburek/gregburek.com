<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Greg Burek</title>
  <subtitle>Greg writes things</subtitle>
  <id>http://blog.gregburek.com/</id>
  <link href="http://blog.gregburek.com/"/>
  <link href="http://blog.gregburek.com/feed.xml" rel="self"/>
  <updated>2016-10-06T15:08:00-07:00</updated>
  <author>
    <name>Greg Burek</name>
  </author>
  <entry>
    <title>Lessons from Automatic Incident Resolution for a Million Databases - SREcon16 EU</title>
    <link rel="alternate" href="/2016/10/06/lessons-from-automatic-incident-resolution-for-a-million-databases-srecon16-eu/"/>
    <id>/2016/10/06/lessons-from-automatic-incident-resolution-for-a-million-databases-srecon16-eu/</id>
    <published>2016-10-06T15:08:00-07:00</published>
    <updated>2016-10-06T15:08:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;In July, I traveled to Dublin, Ireland to give a short talk about automtic
incident resolution as we do it at Heroku Data. The original video may be found
on the &lt;a href="https://www.usenix.org/conference/srecon16europe/program/presentation/burek"&gt;SREcon16 EU site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The slides, including working gifs and a video of the talk are embedded below.&lt;/p&gt;

&lt;div class='slide'&gt;
  &lt;iframe src="https://docs.google.com/presentation/d/1JLMFNUBh0EI5DihNw5Jsq7Gh1ePe6AeoFdFY5mz3_jM/embed?start=false&amp;loop=false&amp;delayms=3000" frameborder="0" width="760" height="475" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"&gt;&lt;/iframe&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;div class='slide'&gt;
  &lt;iframe width="760" height="475" src="https://www.youtube.com/embed/hrNsVSQdXxU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/iframe&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Installing bcc to evaluate BPF and Postgres</title>
    <link rel="alternate" href="/2016/10/04/installing-bcc-to-evaluate-bpf-and-postgres/"/>
    <id>/2016/10/04/installing-bcc-to-evaluate-bpf-and-postgres/</id>
    <published>2016-10-04T14:51:00-07:00</published>
    <updated>2016-10-04T14:51:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="https://twitter.com/t_crayford"&gt;@t_crayford&lt;/a&gt; sent me Brendan Gregg&amp;rsquo;s latest
missive about performance tracing, this time for &lt;a href="http://www.brendangregg.com/blog/2016-10-04/linux-bcc-mysqld-qslower.html"&gt;Linux MySQL Slow Query Tracing with bcc/BPF&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/iovisor/bcc"&gt;bcc&lt;/a&gt; stands for &amp;lsquo;BPF Compiler Collection&amp;rsquo; and
&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Packet_Filter"&gt;BPF&lt;/a&gt; stands for
&amp;#39;Berkeley Packet Filter&amp;rsquo;. From the bcc
&lt;a href="https://github.com/iovisor/bcc/blob/60393ea5dd966d33ff24929f6981df09473cbb1b/README.md"&gt;README&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;BCC is a toolkit for creating efficient kernel tracing and manipulation
programs, and includes several useful tools and examples. It makes use of
extended BPF (Berkeley Packet Filters), formally known as eBPF, a new feature
that was first added to Linux 3.15. Much of what BCC uses requires Linux 4.1
and above.&lt;/p&gt;

&lt;p&gt;eBPF was &lt;a href="https://lkml.org/lkml/2015/4/14/232"&gt;described&lt;/a&gt; by Ingo Moln√°r as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the more interesting features in this cycle is the ability to attach
eBPF programs (user-defined, sandboxed bytecode executed by the kernel) to
kprobes. This allows user-defined instrumentation on a live kernel image
that can never crash, hang or interfere with the kernel negatively.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;BCC makes BPF programs easier to write, with kernel instrumentation in C (and
includes a C wrapper around LLVM), and front-ends in Python and lua. It is
suited for many tasks, including performance analysis and network traffic
control.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As I work for Heroku Postgres, I wanted to investigate something similar for
Postgres, running on our infrastructure. First thing to check was if it was
even possible on our systems, using &lt;a href="https://github.com/iovisor/bcc/blob/60393ea5dd966d33ff24929f6981df09473cbb1b/INSTALL.md"&gt;bcc&amp;rsquo;s INSTALL
instructions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;New Postgres databases get Ubuntu Trusty instances with
&lt;code&gt;linux-generic-lts-xenial&lt;/code&gt; kernels of the 4.4 series:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;=&amp;gt; select version();
                                             version
-------------------------------------------------------------------------------------------------
 PostgreSQL 9.5.4 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 4.8.2-19ubuntu1) 4.8.2, 64-bit
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ uname -a
Linux ip-10-0-10-230 4.4.0-38-generic #57~14.04.1-Ubuntu SMP Tue Sep 6 17:20:43 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This seems to satisfy the &lt;code&gt;Linux kernel version 4.1 or newer&lt;/code&gt; requirement.&lt;/p&gt;

&lt;p&gt;Next thing to check is if the kernel has been compiled properly:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ cat /boot/config-4.4.0-38-generic | grep BPF
CONFIG_BPF=y
CONFIG_BPF_SYSCALL=y
CONFIG_NETFILTER_XT_MATCH_BPF=m
CONFIG_NET_CLS_BPF=m
CONFIG_NET_ACT_BPF=m
CONFIG_BPF_JIT=y
CONFIG_HAVE_BPF_JIT=y
CONFIG_BPF_EVENTS=y
CONFIG_TEST_BPF=m
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This looks ok! Next up is to install the repo and tools:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys D4284CDD
...
gpg: requesting key D4284CDD from hkp server keyserver.ubuntu.com
gpg: key D4284CDD: public key "Brenden Blanco &amp;lt;bblanco@plumgrid.com&amp;gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1  (RSA: 1)
~$ echo "deb https://repo.iovisor.org/apt trusty main" | sudo tee /etc/apt/sources.list.d/iovisor.list
deb https://repo.iovisor.org/apt trusty main
~$ sudo apt-get update
...
Fetched 4,322 kB in 3s (1,269 kB/s)
Reading package lists... Done
~$ sudo apt-get install binutils bcc bcc-tools libbcc-examples python-bcc
Reading package lists... Done
Building dependency tree
Reading state information... Done
binutils is already the newest version.
binutils set to manually installed.
The following extra packages will be installed:
  bin86 elks-libc libbcc
The following NEW packages will be installed:
  bcc bcc-tools bin86 elks-libc libbcc libbcc-examples python-bcc
0 upgraded, 7 newly installed, 0 to remove and 30 not upgraded.
Need to get 10.4 MB of archives.
After this operation, 36.6 MB of additional disk space will be used.
Do you want to continue? [Y/n] y
...
~$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now to test this out:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# /usr/share/bcc/tools/tplist -l /usr/lib/postgresql/9.5/bin/postgres
Traceback (most recent call last):
  File "/usr/share/bcc/tools/tplist", line 16, in &amp;lt;module&amp;gt;
    from bcc import USDTReader
ImportError: cannot import name USDTReader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Welp. Looking at the source of &lt;a href="https://github.com/iovisor/bcc/blob/6e60fbc8a672d8f29cab688ddc0df6d43a96c300/tools/tplist.py"&gt;tplist on current master&lt;/a&gt;,
the &lt;a href="https://github.com/iovisor/bcc/commit/69e361ac66fbf3baadb1f7cf21762df61ad7a5a9#diff-8189c35f15538919a795b3f18ad0db66L16"&gt;most recent commit&lt;/a&gt;
removes &lt;code&gt;USDTReader&lt;/code&gt;. Time to try the nightly builds:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ echo "deb [trusted=yes] https://repo.iovisor.org/apt/trusty trusty-nightly main" | sudo tee /etc/apt/sources.list.d/iovisor.list
~$ sudo apt-get update
~$ sudo apt-get install bcc-tools
~$ sudo /usr/share/bcc/tools/tplist -l /usr/lib/postgresql/9.5/bin/postgres
'USDT' object has no attribute 'enumerate_probes'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Welp. &lt;code&gt;enumerate_probes&lt;/code&gt; was added in another part of the &lt;a href="https://github.com/iovisor/bcc/commit/69e361ac66fbf3baadb1f7cf21762df61ad7a5a9#diff-4cf0bde404ce4b67b2961b61419fa23fR58"&gt;above patch&lt;/a&gt;, so I think other things
need to be updated, as well.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ sudo apt-get install binutils bcc bcc-tools libbcc-examples python-bcc
Reading package lists... Done
Building dependency tree
Reading state information... Done
bcc is already the newest version.
binutils is already the newest version.
bcc-tools is already the newest version.
The following packages will be upgraded:
  libbcc-examples python-bcc
2 upgraded, 0 newly installed, 0 to remove and 31 not upgraded.
Need to get 302 kB of archives.
After this operation, 6,144 B of additional disk space will be used.
Do you want to continue? [Y/n] y
Get:1 https://repo.iovisor.org/apt/trusty/ trusty-nightly/main libbcc-examples amd64 0.2.0-22.git.12a09dc [267 kB]
Get:2 https://repo.iovisor.org/apt/trusty/ trusty-nightly/main python-bcc all 0.2.0-22.git.12a09dc [34.3 kB]
Fetched 302 kB in 0s (319 kB/s)
(Reading database ... 91427 files and directories currently installed.)
Preparing to unpack .../libbcc-examples_0.2.0-22.git.12a09dc_amd64.deb ...
Unpacking libbcc-examples (0.2.0-22.git.12a09dc) over (0.2.0-1) ...
Preparing to unpack .../python-bcc_0.2.0-22.git.12a09dc_all.deb ...
Unpacking python-bcc (0.2.0-22.git.12a09dc) over (0.2.0-1) ...
Setting up libbcc-examples (0.2.0-22.git.12a09dc) ...
Setting up python-bcc (0.2.0-22.git.12a09dc) ...
~$ less /usr/lib/python2.7/dist-packages/bcc/usdt.py
~$ sudo /usr/share/bcc/tools/tplist -l /usr/lib/postgresql/9.5/bin/postgres
Traceback (most recent call last):
  File "/usr/share/bcc/tools/tplist", line 16, in &amp;lt;module&amp;gt;
    from bcc import USDT
  File "/usr/lib/python2.7/dist-packages/bcc/__init__.py", line 28, in &amp;lt;module&amp;gt;
    from .libbcc import lib, _CB_TYPE, bcc_symbol
  File "/usr/lib/python2.7/dist-packages/bcc/libbcc.py", line 160, in &amp;lt;module&amp;gt;
    lib.bcc_usdt_get_probe_argctype.restype = ct.c_char_p
  File "/usr/lib/python2.7/ctypes/__init__.py", line 378, in __getattr__
    func = self.__getitem__(name)
  File "/usr/lib/python2.7/ctypes/__init__.py", line 383, in __getitem__
    func = self._FuncPtr((name_or_ordinal, self))
AttributeError: /usr/lib/x86_64-linux-gnu/libbcc.so.0: undefined symbol: bcc_usdt_get_probe_argctype
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more error. This time in &lt;code&gt;libbcc&lt;/code&gt;. Seems like another package to pull from nightly.&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ sudo apt-get install libbcc
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following packages will be upgraded:
  libbcc
1 upgraded, 0 newly installed, 0 to remove and 30 not upgraded.
Need to get 9,505 kB of archives.
After this operation, 0 B of additional disk space will be used.
Get:1 https://repo.iovisor.org/apt/trusty/ trusty-nightly/main libbcc amd64 0.2.0-22.git.12a09dc [9,505 kB]
Fetched 9,505 kB in 2s (3,276 kB/s)
(Reading database ... 91427 files and directories currently installed.)
Preparing to unpack .../libbcc_0.2.0-22.git.12a09dc_amd64.deb ...
Unpacking libbcc (0.2.0-22.git.12a09dc) over (0.2.0-1) ...
Setting up libbcc (0.2.0-22.git.12a09dc) ...
Processing triggers for libc-bin (2.19-0ubuntu6.9) ...
~$ sudo /usr/share/bcc/tools/tplist -l /usr/lib/postgresql/9.5/bin/postgres
~$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OK! No errors. This is good, as it answers my questions as to if this postgres
package was compiled with the &lt;code&gt;--enable-dtrace&lt;/code&gt;. I can further confirm with
&lt;code&gt;readelf -n&lt;/code&gt;&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;~$ readelf -n /usr/lib/postgresql/9.5/bin/postgres

Displaying notes found at file offset 0x00000254 with length 0x00000020:
  Owner                 Data size       Description
  GNU                  0x00000010       NT_GNU_ABI_TAG (ABI version tag)
    OS: Linux, ABI: 2.6.24

Displaying notes found at file offset 0x00000274 with length 0x00000024:
  Owner                 Data size       Description
  GNU                  0x00000014       NT_GNU_BUILD_ID (unique build ID bitstring)
    Build ID: 6990037682e6668adc87ae7a6b82e4640959cf52
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are no USDT or bpf traces found here, so next step is to recompile
postgres with &lt;code&gt;--enable-dtrace&lt;/code&gt; and see what probes are available to use with
BPF (spoiler: &lt;a href="https://www.postgresql.org/docs/current/static/dynamic-trace.html"&gt;there are a lot of them&lt;/a&gt;).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Stream a remote file to S3</title>
    <link rel="alternate" href="/2015/06/20/stream-a-remote-file-to-s3/"/>
    <id>/2015/06/20/stream-a-remote-file-to-s3/</id>
    <published>2015-06-20T17:07:00-07:00</published>
    <updated>2015-06-20T17:07:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;While attempting to work with my gif collection, I was experimenting with how
to capture gifs from the internet and place them into a S3 bucket for later
use. I found that it was possible to stream a remote file directly to S3.&lt;/p&gt;

&lt;p&gt;Using the &lt;code&gt;aws-sdk&lt;/code&gt; &lt;a href="https://github.com/aws/aws-sdk-ruby"&gt;gem version 2&lt;/a&gt;, and
the &lt;code&gt;open-uri&lt;/code&gt; module of the &lt;a href="http://ruby-doc.org/stdlib-2.2.2/libdoc/open-uri/rdoc/OpenURI.html"&gt;ruby standard
library&lt;/a&gt;,
one can link the two IO streams together fairly easily:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'aws-sdk'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'open-uri'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'sequel'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'digest/md5'&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoteFile&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;s3&lt;/span&gt;
    &lt;span class="vi"&gt;@s3&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="no"&gt;Aws&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;S3&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Resource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;region: &lt;/span&gt;&lt;span class="no"&gt;ENV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'AWS_REGION'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;md5_hash&lt;/span&gt;
    &lt;span class="no"&gt;Digest&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MD5&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hexdigest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md5_hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;url&lt;/span&gt;
    &lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;URI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;upload_to_s3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket_name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;body: &lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;RemoteFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'https://i.imgur.com/DO3Hr4A.gif'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upload_to_s3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;bucket_name: &lt;/span&gt;&lt;span class="s1"&gt;'mah_gifs'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code snippet assumes you have &lt;code&gt;ENV[&amp;#39;AWS_ACCESS_KEY_ID&amp;#39;]&lt;/code&gt; and
&lt;code&gt;ENV[&amp;#39;AWS_SECRET_ACCESS_KEY&amp;#39;]&lt;/code&gt; set.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>DNS, eglibc and resolv-replace on Heroku</title>
    <link rel="alternate" href="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/"/>
    <id>/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/</id>
    <published>2015-02-22T15:33:00-08:00</published>
    <updated>2015-02-22T15:33:00-08:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;2015-03-01: Fixed versions of eglibc are available for Ubuntu Precise and
Trusty. Time to update.&lt;/p&gt;

&lt;p&gt;I work on the team that runs &lt;a href="https://www.heroku.com/postgres"&gt;Heroku Postgres&lt;/a&gt;. As we have continued to grow, I
have been tracking an intermitent error with &lt;a href="https://devcenter.heroku.com/articles/rollbar"&gt;Rollbar&lt;/a&gt; that occurs about once
every 50,000 HTTP requests. As we are doing many hundreds of thousands of API
calls a minute to various services, this error can pop up fairly frequently and
in very inconvenient places. The most common traceback seems to indicate a
failure to resolve DNS:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;#&amp;lt;SocketError: getaddrinfo: Name or service not known&amp;gt;&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'initialize'&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'open'&lt;/span&gt;
&lt;span class="sr"&gt;/app/&lt;/span&gt;&lt;span class="n"&gt;vendor&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;rb&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;879&lt;/span&gt;&lt;span class="ss"&gt;:in&lt;/span&gt; &lt;span class="s1"&gt;'block in connect'&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="http://lmgtfy.com/?q=SocketError%3A+getaddrinfo%3A+Name+or+service+not+known+heroku"&gt;Google&lt;/a&gt; led me to a &lt;a href="http://www.subelsky.com/2014/05/fixing-socketerror-getaddrinfo-name-or.html"&gt;pertinent blog post&lt;/a&gt; that recommended using ruby&amp;rsquo;s
&lt;a href="http://apidock.com/ruby/Resolv"&gt;Resolv&lt;/a&gt; library for all DNS requests via a script called &lt;a href="https://github.com/ruby/ruby/blob/trunk/lib/resolv-replace.rb"&gt;resolv-replace&lt;/a&gt;.
Adding a single line to our initializers, &lt;code&gt;require resolv-replace&lt;/code&gt;, caused errors
while submitting Logplex messages to immediately drop:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/logplex_errors.png" alt="Logplex Errors" /&gt;&lt;/p&gt;

&lt;p&gt;As did errors from trying to interact with our monitoring service, Observatory:&lt;/p&gt;

&lt;p&gt;&lt;img src="/2015/02/22/dns-eglibc-and-resolv-replace-on-heroku/observatory_errors.png" alt="Observatory Errors" /&gt;&lt;/p&gt;

&lt;p&gt;In an internal thread, &lt;a href="https://twitter.com/freeformz"&gt;Ed Muller&lt;/a&gt; pointed out a &lt;a href="https://github.com/golang/go/issues/6336#issuecomment-66085142"&gt;golang work around&lt;/a&gt;
of a &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=15946"&gt;bug in glibc&lt;/a&gt; which is very likely to be a factor in this error:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Under high load, getaddrinfo() starts sending DNS queries to random
file descriptors, e.g. some unrelated socket connected to a remote service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Heroku is a shared platform with multitenant runtime instances, it is
possible for a random runtime to experience high load and the &lt;a href="https://devcenter.heroku.com/articles/cedar-ubuntu-packages"&gt;cedar-14 glibc
binaries&lt;/a&gt; are known to be impacted by this bug. Version 2.20 of glibc has a
fix and as of &lt;a href="https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/trusty/eglibc/trusty-security/revision/346"&gt;2.19-0ubuntu6.6&lt;/a&gt; and &lt;a href="https://bazaar.launchpad.net/~ubuntu-branches/ubuntu/precise/eglibc/precise-security/revision/316"&gt;2.15-0ubuntu10.11&lt;/a&gt; this fix was
backported to Ubuntu Precise and Trusty. &lt;s&gt;However, Ubuntu Precise currently
ships &lt;a href="http://packages.ubuntu.com/precise-updates/libc6"&gt;2.15-0ubuntu10.10&lt;/a&gt; and Trusty provides &lt;a href="http://packages.ubuntu.com/trusty-updates/libc6"&gt;2.19-0ubuntu6.5&lt;/a&gt;, so this
bug may continue to be a problem for some time to come.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;My immediate recommendation is to use language native DNS resolution like
&lt;code&gt;resolv-replace&lt;/code&gt; whenever possible, on Heroku or other systems. However, if you
require ipv6 or run into problems with &lt;a href="https://github.com/mperham/sidekiq/issues/1258#issuecomment-27389456"&gt;third party gems attempting to resolve
&lt;code&gt;nil&lt;/code&gt; addresses&lt;/a&gt;, and are stuck with the system DNS, upgrade yourself!
&lt;s&gt;please indicate that this bug affects you on the &lt;a href="https://bugs.launchpad.net/eglibc/+bug/1421393"&gt;Launchpad bug report
requesting backporting&lt;/a&gt; to supported versions of Ubuntu.&lt;/s&gt;&lt;/p&gt;

&lt;p&gt;Thanks to Ed Muller, Michael Hale, Keiko Oda, Steve Conklin, Terence Lee and
Richard Schneeman for help in figuring this out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Require HTTPS to your Heroku app</title>
    <link rel="alternate" href="/2014/10/26/require-ssl-to-your-heroku-app/"/>
    <id>/2014/10/26/require-ssl-to-your-heroku-app/</id>
    <published>2014-10-26T15:29:00-07:00</published>
    <updated>2014-10-26T15:29:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;Configuring your Heroku app so that it will redirect insecure HTTP traffic to an
HTTPS endpoint can be finicky and is language/framework specific. I was able to
figure out a general and language independent method thanks to the &lt;a href="https://github.com/ryandotsmith/nginx-buildpack"&gt;nginx
buildpack&lt;/a&gt;. By using nginx,
you can redirect some or all http traffic to your app to the https verison of
your site.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;By adding:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if ($http_x_forwarded_proto != 'https') {
  rewrite ^ https://$host$request_uri? permanent;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to the &lt;code&gt;location&lt;/code&gt; section of your app&amp;rsquo;s nginx config file template, any access
to that location will be met with a &lt;code&gt;301 Moved Permanently&lt;/code&gt; redirect to the
&lt;code&gt;https&lt;/code&gt; version of that site and path.&lt;/p&gt;

&lt;p&gt;EDIT: @jacobian &lt;a href="https://twitter.com/jacobian/status/526538110201368576"&gt;pointed
out&lt;/a&gt; on twitter that
using &lt;a href="http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;HTTP Strict Transport Security
(HSTS)&lt;/a&gt; headers
will make modern clients prefer HTTPS, even for the &lt;code&gt;/insecure&lt;/code&gt; path that lacks
the redirect snippet.&lt;/p&gt;

&lt;p&gt;As all apps are accessible at &lt;code&gt;https://&amp;lt;app-name&amp;gt;.herokuapp.com/&lt;/code&gt; by using
Heroku&amp;rsquo;s &lt;code&gt;herokuapp.com&lt;/code&gt; SSL cert, this provides a free and easy way to secure
your apps. Custom domain names require custom SSL certs, which are available
from traditional SSL vendors or from Heroku addon &lt;a href="https://www.expeditedssl.com/"&gt;Expedited
SSL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A sample app can be found at
&lt;a href="https://github.com/gregburek/heroku-force-ssl-sample"&gt;https://github.com/gregburek/heroku-force-ssl-sample&lt;/a&gt;
and deployed to your Heroku account here: 
&lt;a href="https://heroku.com/deploy?template=https://github.com/gregburek/heroku-force-ssl-sample"&gt;&lt;img src="https://www.herokucdn.com/deploy/button.png" alt="Deploy" /&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Moving site to Middleman</title>
    <link rel="alternate" href="/2014/07/06/moving-site-to-middleman/"/>
    <id>/2014/07/06/moving-site-to-middleman/</id>
    <published>2014-07-06T18:57:00-07:00</published>
    <updated>2014-07-06T18:57:00-07:00</updated>
    <author>
      <name>Greg Burek</name>
    </author>
    <content type="html">&lt;p&gt;This is me attempting to resurrect my blog after several years of silence. This
has also given me a chance to redesign things and adopt another static site
generator.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Octopress served me well, but I felt like it was difficult to grasp the
fundamentals and hard to pick up after a while away. I went looking for new site
framework and found &lt;a href="http://middlemanapp.com/"&gt;Middleman&lt;/a&gt;. I liked that it was
written in Ruby and I really liked the tutorials I found for it.&lt;/p&gt;

&lt;p&gt;In particular, Julie Pagano&amp;rsquo;s fantastic
&lt;a href="http://juliepagano.com/blog/2013/11/10/site-redesign-using-middleman/"&gt;tutorial&lt;/a&gt;
was invaluable in getting me past a bunch of unexpected things.&lt;/p&gt;

&lt;p&gt;The plugins I am using are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/middleman/middleman-blog"&gt;middleman-blog&lt;/a&gt; for support of
the article format&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/neo/middleman-gh-pages"&gt;middleman-gh-pages&lt;/a&gt; for an easy
GitHub pages integrated workflow&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/middleman/middleman-blog"&gt;middleman-syntax&lt;/a&gt; for syntax
highlighting of code snippets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting from a blank Gemfile, unfortunately, seemed to not give properly
rendered code syntax blocks.&lt;/p&gt;

&lt;p&gt;An unmerged &lt;a href="https://github.com/middleman/middleman-syntax/pull/42"&gt;PR&lt;/a&gt; appears
to address the problem, but I found that using Julie Pagano&amp;rsquo;s
&lt;a href="https://github.com/juliepagano/juliepagano.com/blob/master/Gemfile.lock"&gt;Gemfile.lock&lt;/a&gt;
also worked very well. I am very grateful that it was available.&lt;/p&gt;

&lt;p&gt;The rest of the work was about adapting my strange icon color scheme into
something that doesn&amp;rsquo;t repulse and offend. Mixed results, I would say.&lt;/p&gt;

&lt;p&gt;Now that this is set up, I have high hopes to use this new system to write more
about technology and my experiences with it.&lt;/p&gt;

&lt;p&gt;The code for this site now resides on &lt;a href="https://github.com/gregburek/gregburek.com"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
